#+TITLE: newm developer information

* Current (v0.3)
** Bugs / Technical debt
*** WAIT Bug: Occasionally orphan states do appear (last time GIMP-2.99, alacritty -e nmtui without nm running)
*** WAIT Bug: Occasionally fullscreen video opens stacked (in second window)
*** WAIT Bug: Occasionally Chromium opens with twice the size (happens more when newm-sidecar is running)
*** STRT TESTS: Do all tests, find bugs, ...

** TODO Github action mypy (needs pywm stubs)

** Improved panel
*** TODO Get rid of sys_backend maybe some default config instead
*** TODO dbus endpoint for newm-cmd (?), plus e.g. waybar - get rid of websockets
*** TODO Incorporate
- catapult
- rofi
- wob
- mako
*** TODO Get rid of newm-panel-nwjs but keep newm_panel_basic

** Widgets
*** TODO Animated border around current window
*** TODO Titles during Overview
*** TODO SSD on certain windows (mostly floating)

** TODO Video on newm-sidecar

** Improvements
*** TODO Layer shell - Exclusive zones and keyboard interactivity
*** TODO Possible and sensible to use a decorater for layout methods where reducer is defined and then an animation is started?
*** TODO Scale windows moving others "out of the way"

* v0.3
** More detailed config on Layout class
** Ability to increase size of rows or cols (e.g. in 1x2 | 1x2)
** Window swallowing
** Ultrawide monitors --> two workspaces on one output
** Move to resize overlay: Trigger size changes on invisible windows only in finish transition? Analogous to interpolate
** Move tiles from workspace to another -> animate size change instead of jump
** Allow certain overlays to start during animations (e.g. 3/4-Finger-Swipe during animation one view)
** Autoplace the first couple of windows more like i3 (i.e. resizing existing windows / tiling)
** Dynamic background


* Setup clean arch chroot / qemu for testing

** Setup chroot

Following https://www.collabora.com/news-and-blog/blog/2019/03/20/bootstraping-a-minimal-arch-linux-image/

#+BEGIN_SRC sh
truncate -s 20G arch_disk.raw
mkfs.ext4 arch_disk.raw
mkdir mnt
sudo mount arch_disk.raw mnt
sudo pacstrap mnt base base-devel linux linux-firmware
sudo arch-chroot mnt
#+END_SRC

Now we are inside the chroot, very basic setup:

#+BEGIN_SRC sh
passwd
pacman -S dhcpcd

useradd --create-home test
passwd test
usermod -aG wheel test
vim /etc/sudoers # add wheel
su test
#+END_SRC

Finally clean up

#+BEGIN_SRC sh
exit
sudo umount mnt
#+END_SRC

** Setup virtual machine

To use the disk in a virtual machine (not incredibly nice...)

#+BEGIN_SRC sh
sudo mount arch_disk.raw mnt
cp -r mnt/boot mnt_boot
sudo umount mnt
#+END_SRC

and start using

#+BEGIN_SRC sh
qemu-system-x86_64 --enable-kvm -hda arch_disk.raw -m 4G -kernel mnt_boot/vmlinuz-linux -initrd mnt_boot/initramfs-linux[-fallback].img -append "root=/dev/sda rw" -vga virtio
#+END_SRC

To enable internet access, probably

#+BEGIN_SRC sh
systemctl enable dhcpcd
systemctl start dhcpcd
#+END_SRC

is necessary
