#+TITLE: newm developer information

* Current (v0.2)
** Multi-output support
*** STRT Specify requirements
** Improved panel
- Bars as panels not as widgets
- Possibly flutter-based?
- Drop websockets and with that newm-panel-nwjs but keep newm_panel_basic
*** TODO Specify requirments for newm <-> panel interaction

* Backlog / Ideas
** Titles during OverviewOverlay
** Allow certain overlays to start during animations (e.g. 3/4-Finger-Swipe during animation one view)
** Autoplace the first couple of windows more like i3 (i.e. resizing existing windows / tiling)


* Multi-output spec
** Aspects
*** Mouse movement: needs to be possible intuitively between screens --> outputs must be placed in a defined layout
*** Config: configured per output, e.g. scale --> Rearrange some config aspects
*** Windows: Need to be placed on a certain output and moved between --> Good mapping from state to which output(s) a window is on
- Windows are displayed on multiple outputs simultaneously if moved between
- Different output scales --> smooth performance? (Should be possible wl_surface::send_enter can be n<->m)
*** Panels and widgets: some need to be present per output / some once --> Place them per output (consistent with window mapping) and replicate if necessary
*** State: Per output overview should be possible --> some aspects of LayoutState per output others not: Loosely or tightly coupled states among outputs
- Fullscreen window: per output
- Scale?
- In overview state: per output?

* Setup clean arch chroot / qemu for testing

** Setup chroot

Following https://www.collabora.com/news-and-blog/blog/2019/03/20/bootstraping-a-minimal-arch-linux-image/

#+BEGIN_SRC sh
truncate -s 20G arch_disk.raw
mkfs.ext4 arch_disk.raw
mkdir mnt
sudo mount arch_disk.raw mnt
sudo pacstrap mnt base base-devel linux linux-firmware
sudo arch-chroot mnt
#+END_SRC

Now we are inside the chroot, very basic setup:

#+BEGIN_SRC sh
passwd
pacman -S dhcpcd

useradd --create-home test
passwd test
usermod -aG wheel test
vim /etc/sudoers # add wheel
su test
#+END_SRC

Finally clean up

#+BEGIN_SRC sh
exit
sudo umount mnt
#+END_SRC

** VSetup virtual machine

To use the disk in a virtual machine (not incredibly nice...)

#+BEGIN_SRC sh
sudo mount arch_disk.raw mnt
cp -r mnt/boot mnt_boot
sudo umount mnt
#+END_SRC

and start using

#+BEGIN_SRC sh
qemu-system-x86_64 --enable-kvm -hda arch_disk.raw -m 4G -kernel mnt_boot/vmlinuz-linux -initrd mnt_boot/initramfs-linux[-fallback].img -append "root=/dev/sda rw" -vga virtio
#+END_SRC

To enable internet access, probably

#+BEGIN_SRC sh
systemctl enable dhcpcd
systemctl start dhcpcd
#+END_SRC

is necessary
