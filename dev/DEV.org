#+TITLE: newm developer information

* Current (v0.2)
** Bugs: currently not reproducible (possibly fixed by other changes)
*** WAIT Bug: Occasionally Chromium / Brave size changes are not handled properly (e.g. appears twice the size initially / doesn't fill the screen after fullscreen) - possibly relies rather on xdg_surface than xdg_toplevel size (see pywm - wm_view_xdg.possibly_update_size)

** Bugs: reproducible
*** DONE Bug: DBeaver crash seems to be able to create orphan states - see .cache/newm_log_orphan
*** DONE Not on biggest scale => Every size negotiation with LibreOffice fails
- This is related to a 1x1 tile always being too small
- _init_tiled uses the reducer with w=h=1
- If min size reported is correct, maybe _init_tiled could be improved to use it and infer w and h > 1

** TODO TESTS
- [ ] Write more tests concerning newm as opposed to client-side behaviour
  - No rescale on overview and swipe-to-zoom up-to size=5
  - Switch overview <-> fullscreen
  - Fullscreen a 1x2 view, move -> view returns to 1x2
  - Overview, swipe-to-zoom on floating windows
  - Resize floating windows without imperfect frames
  - newm as greeter
  - reload config / move outputs around
  - virtual output and moving windows in-between
- [ ] OBS
  - Misplaced popups when output isn't placed at 0, 0 (happens on sway as well), check with weston
  - Check overlap on rescaling
- [ ] Redo all tests


* Setup clean arch chroot / qemu for testing

** Setup chroot

Following https://www.collabora.com/news-and-blog/blog/2019/03/20/bootstraping-a-minimal-arch-linux-image/

#+BEGIN_SRC sh
truncate -s 20G arch_disk.raw
mkfs.ext4 arch_disk.raw
mkdir mnt
sudo mount arch_disk.raw mnt
sudo pacstrap mnt base base-devel linux linux-firmware
sudo arch-chroot mnt
#+END_SRC

Now we are inside the chroot, very basic setup:

#+BEGIN_SRC sh
passwd
pacman -S dhcpcd

useradd --create-home test
passwd test
usermod -aG wheel test
vim /etc/sudoers # add wheel
su test
#+END_SRC

Finally clean up

#+BEGIN_SRC sh
exit
sudo umount mnt
#+END_SRC

** Setup virtual machine

To use the disk in a virtual machine (not incredibly nice...)

#+BEGIN_SRC sh
sudo mount arch_disk.raw mnt
cp -r mnt/boot mnt_boot
sudo umount mnt
#+END_SRC

and start using

#+BEGIN_SRC sh
qemu-system-x86_64 --enable-kvm -hda arch_disk.raw -m 4G -kernel mnt_boot/vmlinuz-linux -initrd mnt_boot/initramfs-linux[-fallback].img -append "root=/dev/sda rw" -vga virtio
#+END_SRC

To enable internet access, probably

#+BEGIN_SRC sh
systemctl enable dhcpcd
systemctl start dhcpcd
#+END_SRC

is necessary
